# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class RAST_SDK(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def annotate_genome(self, params, context=None):
        """
        funcdef annotate_genome(UnspecifiedObject params) returns (AnnotateGenomeResults) authentication required;
        :param params: instance of type "AnnotateGenomeParams" (Input for the
           annotate_genome function. Required parameters: workspace - the
           workspace of the destination (and source if src_workspace is not
           provided) of the genome/contigset object. input_genome - the
           genome_id for the genome to be RAST-ed; Optional parameters:
           src_workspace - the workspace of the source the genome/contigset
           object, default to workspace. dest_workspace - the workspace for
           the RAST-ed the genome, default to workspace. input_contigset - a
           contigset, defaut to null. genetic_code - an int representing the
           genetic code of the genome; domain - the domain of the genome;
           scientific_name - the scientific_name of the genome; output_genome
           - the id for the RAST-ed genome, default to the input_genome; The
           following are a group of bool settings for the RAST processing,
           default values are set in the implementation
           call_features_rRNA_SEED, call_features_tRNA_trnascan,
           call_selenoproteins, call_pyrrolysoproteins,
           call_features_repeat_region_SEED,
           call_features_insertion_sequences,
           call_features_strep_suis_repeat,
           call_features_strep_pneumo_repeat, call_features_crispr,
           call_features_CDS_glimmer3, call_features_CDS_prodigal,
           call_features_CDS_genemark, annotate_proteins_kmer_v2,
           kmer_v1_parameters, annotate_proteins_similarity,
           resolve_overlapping_features, find_close_neighbors,
           call_features_prophage_phispy, retain_old_anno_for_hypotheticals)
           -> structure: parameter "workspace" of String, parameter
           "input_genome" of type "genome_id" (A string representing a genome
           id.), parameter "input_contigset" of type "contigset_id" (A string
           representing a ContigSet id.), parameter "genetic_code" of Long,
           parameter "domain" of String, parameter "scientific_name" of
           String, parameter "output_genome" of type "genome_id" (A string
           representing a genome id.), parameter "call_features_rRNA_SEED" of
           type "bool" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "call_features_tRNA_trnascan" of type "bool" (A boolean
           - 0 for false, 1 for true. @range (0, 1)), parameter
           "call_selenoproteins" of type "bool" (A boolean - 0 for false, 1
           for true. @range (0, 1)), parameter "call_pyrrolysoproteins" of
           type "bool" (A boolean - 0 for false, 1 for true. @range (0, 1)),
           parameter "call_features_repeat_region_SEED" of type "bool" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "call_features_insertion_sequences" of type "bool" (A boolean - 0
           for false, 1 for true. @range (0, 1)), parameter
           "call_features_strep_suis_repeat" of type "bool" (A boolean - 0
           for false, 1 for true. @range (0, 1)), parameter
           "call_features_strep_pneumo_repeat" of type "bool" (A boolean - 0
           for false, 1 for true. @range (0, 1)), parameter
           "call_features_crispr" of type "bool" (A boolean - 0 for false, 1
           for true. @range (0, 1)), parameter "call_features_CDS_glimmer3"
           of type "bool" (A boolean - 0 for false, 1 for true. @range (0,
           1)), parameter "call_features_CDS_prodigal" of type "bool" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "call_features_CDS_genemark" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter
           "annotate_proteins_kmer_v2" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "kmer_v1_parameters"
           of type "bool" (A boolean - 0 for false, 1 for true. @range (0,
           1)), parameter "annotate_proteins_similarity" of type "bool" (A
           boolean - 0 for false, 1 for true. @range (0, 1)), parameter
           "resolve_overlapping_features" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter
           "find_close_neighbors" of type "bool" (A boolean - 0 for false, 1
           for true. @range (0, 1)), parameter
           "call_features_prophage_phispy" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter
           "retain_old_anno_for_hypotheticals" of type "bool" (A boolean - 0
           for false, 1 for true. @range (0, 1))
        :returns: instance of type "AnnotateGenomeResults" -> structure:
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "id" of String,
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'RAST_SDK.annotate_genome',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('RAST_SDK.status',
                                        [], self._service_ver, context)
